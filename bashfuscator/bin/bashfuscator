#!/usr/bin/env python3

from argparse import ArgumentTypeError, ArgumentParser, FileType
from collections import OrderedDict
from sys import exit

from argcomplete import autocomplete
import pyperclip
from tabulate import tabulate

from bashfuscator.common.colors import bold
from bashfuscator.common.messages import activateQuietMode, printInfo
from bashfuscator.core.obfuscation_manager import ObfuscationHandler
from bashfuscator.lib.command_obfuscators import *
from bashfuscator.lib.string_obfuscators import *
from bashfuscator.lib.token_obfuscators import *


commandObfuscators = [
    CaseSwap(),
    ForCode(),
    Reverse()
]

stringObfuscators = [
    FolderGlob(),
    FileGlob()
]

tokenObfuscators = [
    AnsiCQuote()
]


def check_positive(value):
    ivalue = int(value)
    if ivalue <= 0:
         raise ArgumentTypeError("{ivalue} is an invalid positive int value".format(ivalue))
    return ivalue


def getMutators(prefix, parsed_args, **kwargs):
    allMutators = commandObfuscators + stringObfuscators + tokenObfuscators
    
    return [ob.longName for ob in allMutators]


def listMutators():
    cmdNames = []
    cmdDecriptions = []
    cmdSize = []
    cmdTime = []
    cmdCredits = []
    for cmdOb in commandObfuscators:
        cmdNames.append(cmdOb.name)
        cmdDecriptions.append(cmdOb.description)
        cmdSize.append(cmdOb.sizeRating)
        cmdTime.append(cmdOb.timeRating)
        cmdCredits.append(cmdOb.credits)

    strNames = []
    strDecriptions = []
    strSize = []
    strTime = []
    strCredits = []
    for strOb in stringObfuscators:
        strNames.append(strOb.name)
        strDecriptions.append(strOb.description)
        strSize.append(strOb.sizeRating)
        strTime.append(strOb.timeRating)
        strCredits.append(strOb.credits)

    tokNames = []
    tokDecriptions = []
    tokSize = []
    tokCredits = []
    for tokOb in tokenObfuscators:
        tokNames.append(tokOb.name)
        tokDecriptions.append(tokOb.description)
        tokSize.append(tokOb.sizeRating)
        tokCredits.append(tokOb.credits)

    cmdHeaders = ["Name", "Description", "Size Rating", "Time Rating", "Credits"]
    cmdValues = [cmdNames, cmdDecriptions, cmdSize, cmdTime, cmdCredits]

    strHeaders = cmdHeaders
    strValues = [strNames, strDecriptions, strSize, strTime, strCredits]

    tokHeaders = ["Name", "Description", "Size Rating", "Credits"]
    tokValues = [tokNames, tokDecriptions, tokSize, tokCredits]

    print(bold("Command Obfuscators:\n"))
    print(tabulate(OrderedDict(zip(cmdHeaders, cmdValues)), headers="keys"))

    print(bold("\nString Obfuscators:\n"))
    print(tabulate(OrderedDict(zip(strHeaders, strValues)), headers="keys"))

    print(bold("\nToken Obfuscators:\n"))
    print(tabulate(OrderedDict(zip(tokHeaders, tokValues)), headers="keys"))


if __name__ == "__main__":
    parser = ArgumentParser()
    progOpts = parser.add_argument_group("Program Options")
    inptOpts = progOpts.add_mutually_exclusive_group(required=True)
    inptOpts.add_argument("-l", "--list", action="store_true", help="List all the availible obufscators, compressors, encoders, and encryptors")
    inptOpts.add_argument("-c", "--command", type=str, help="Command to obfuscate")
    inptOpts.add_argument("-f", "--file", type=FileType(mode="r"), help="Name of the script to obfuscate")
    progOpts.add_argument("-o", "--outfile", type=FileType(mode="w"), help="File to write payload to")
    progOpts.add_argument("-q", "--quiet", action="store_true", help="Print only the payload")

    obOpts = parser.add_argument_group("Obfuscation Options")
    sizeOpts = obOpts.add_mutually_exclusive_group()
    sizeOpts.add_argument("-s", "--payload-size", default=2, type=int, choices=range(1, 4), help="Desired size of the payload. Default: 2")
    sizeOpts.add_argument("-sm", "--min-payload-size", action="store_true", help="Generate the smallest payload possible")
    sizeOpts.add_argument("-sM", "--max-payload-size", action="store_true", help="Generate the largest payload possible")
    timeOpts = obOpts.add_mutually_exclusive_group()
    timeOpts.add_argument("-t", "--execution-time", default=2, type=int, choices=range(1, 4), help="Desired speed of the payload. Default: 2")
    timeOpts.add_argument("-tm", "--min-execution-time", action="store_true", help="Generate the fastest payload possible")
    timeOpts.add_argument("-tM", "--max-execution-time", action="store_true", help="Generate the slowest payload possible")

    advancedOpts = parser.add_argument_group("Advanced Options")
    advancedOpts.add_argument("--choose-mutators", nargs="+", metavar="MUTATOR", help="Manually choose what mutators are used in what order").completer = getMutators
    advancedOpts.add_argument("--layers", type=check_positive, help="Number of layers of obfuscation to apply. Default: 2")
    binOpts = advancedOpts.add_mutually_exclusive_group()
    binOpts.add_argument("--include-binaries", type=str, metavar="BINARIES", help="Binaries you exclusively want used in the generated payload")
    binOpts.add_argument("--exclude-binaries", type=str, metavar="BINARIES", help="Binaries you don't want to used in the generated payload")
    advancedOpts.add_argument("--no-minify", action="store_true", help="Don't minify script or command entered before obfuscation")

    misc = parser.add_argument_group("Misc Options")
    misc.add_argument("--clip", action="store_true", help="Copy the payload to clipboard")

    autocomplete(parser)
    args = parser.parse_args()

    if args.list:
        listMutators()
        exit(0)

    if args.quiet:
        activateQuietMode()

    if args.min_payload_size:
        args.payload_size = 0
    elif args.max_payload_size:
        args.payload_size = 4

    if args.min_execution_time:
        args.execution_time = 0
    elif args.max_execution_time:
        args.execution_time = 4

    if args.include_binaries is not None:
        args.binaryPref = (args.include_binaries.split(","), True)
    elif args.exclude_binaries is not None:
        args.binaryPref = (args.exclude_binaries.split(","), False)
    else:
        args.binaryPref = None

    if args.layers is None:
        if args.choose_mutators is not None:
            args.layers = 1
        else:
            args.layers = 2

    obHandler = ObfuscationHandler(commandObfuscators, stringObfuscators, tokenObfuscators, args)
    payload = obHandler.generatePayload()

    if args.clip:
        printInfo("Payload copied to clipboard\n")
        pyperclip.copy(payload)

    print(payload)
    if not args.quiet:
        print("")

    printInfo("Payload size: {0} characters".format(len(payload)))
